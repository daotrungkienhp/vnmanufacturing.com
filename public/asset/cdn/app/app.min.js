/**
 * ===========================================================================================
 * entry of app lib
 * ===========================================================================================
 */

var app = app || {};

(function() {
    app.register = function(object) {
        let type = object.type + 's';
        if (!app[type]) {
            app[type] = {};
        }
        app[type][object.name] = object;
    };

    app.start = function() {
        app.loadPage();
    }
})();var event = event || { _listeners: {} };

(function() {
    "use strict";

    event.on = function(eventName, callback) {
        if (!eventName || typeof(eventName) !== 'string') {
            return;
        }

        var name = eventName.toLowerCase();
        var eid = 'ev-' + random(18);
        callback.___eid = eid;
        callback.___ename = name;
        event._listeners[name] = event._listeners[name] || {};
        event._listeners[name][eid] = callback;
    };
    event.fire = function(eventName, msg, src) {
        // console.log('[Fire event]', eventName, msg, src);
        var name = (eventName || "").toLowerCase();

        var list = event._listeners[name] || {};
        Object.keys(list).forEach((eid) => {
            if (list[eid]) {
                list[eid](eventName, msg, src);
            }
        });
    };
    event.remove = function(callback) {
        try {
            delete event._listeners[callback.___ename][callback.___eid];
        } catch (e) {
            console.warn(e);
        }
    };

    event.clear = function(eventName) {
        var name = (eventName || "").toLowerCase();
        try {
            delete event._listeners[name];
        } catch (e) {
            console.warn(e);
        }
    }

    function random(length) {
        var ran = '';
        var chat = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var leng = chat.length;
        for (var i = 0; i < length; i++) {
            ran += chat.charAt(Math.floor(Math.random() * leng));
        }
        return ran;
    };
})();/**
 * ===========================================================================================
 * helper.js
 * ===========================================================================================
 */
(function() {
    "use strict";

    class Helper {

        static random(length) {
            var ran = '';
            var chat = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var leng = chat.length;
            for (var i = 0; i < length; i++) {
                ran += chat.charAt(Math.floor(Math.random() * leng));
            }
            return ran;
        }

        static getParameterByName(name, url) {
            if (!url) url = window.location.search;
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }

        static addScript(list, callback) {
            var self = this;

            let js = list.shift();
            if (js === undefined) { return callback(); }

            let script = document.createElement('script');
            script.type = "text/javascript";
            script.src = js;
            script.onload = function() {
                // console.log('mc load', name);
                self.addScript(list, callback); // next
            }
            script.onerror = function() {
                console.error('load script', script.src, 'error');
            }
            document.body.appendChild(script);
        }

        static addStyleSheet(list, callback) {
            var self = this;

            let css = list.shift();
            if (css === undefined) { return callback(); }

            let link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = css;
            link.media = 'all';

            link.onload = function() {
                // console.log('mc load', name);
                self.addStyleSheet(list, callback); // next
            }
            link.onerror = function() {
                console.error('load link', link.href, 'error');
            }

            document.head.appendChild(link);
        }
    }

    // export
    app.Helper = Helper;
})();(function() {
    "use strict";

    class Render extends app.Helper {
        constructor() {
            super();
            this.regions = [];
            this.components = {};
        }

        renderBlocks(callback) {
            var self = this;

            var scName = Render.getParameterByName('page') || Object.keys(app.pages)[0];
            self.components = new app.pages[scName]() || {};

            self.regions.forEach((region) => {
                var list = self.components[region] || [];

                if (list.length) {
                    self.showRegion(region, list);
                } else {
                    // has no block --> hide region.
                    self.hideRegion(region);
                }
            });

            if (callback) { callback(); }
        }

        showRegion(name, configs) {
            var self = this;

            try {

                // 1) move old blocks to temporary
                var container = document.getElementById(name + '-region');
                var temporary = document.createDocumentFragment();
                while (container.children.length) {
                    temporary.appendChild(container.children[0]);
                }

                var oldBlocks = self.regions[name] || [];
                self.regions[name] = [];

                // 2) add all blocks in config list to region.

                var bl, element;
                configs.forEach((cfg) => {

                    // if block is already exist --> add it back and reload.
                    for (var i = oldBlocks.length - 1; i >= 0; i--) {
                        bl = oldBlocks[i];

                        if (cfg.name === bl.name) {
                            element = temporary.children[bl.eid];

                            container.appendChild(element);

                            oldBlocks.splice(i, 1);
                            self.regions[name].push(bl);

                            bl.setConfig(cfg);
                            bl.loadComponent();

                            // break;
                            return;
                        }
                    }

                    // else create new block then add.

                    bl = new app.coms[cfg.com](cfg);
                    element = bl.getHtml();
                    container.insertAdjacentHTML('beforeend', element);
                    container.removeAttribute('style');


                    self.regions[name].push(bl);

                    bl.loadComponent();
                });

            } catch (e) {
                console.warn(e);
            }
        }

        hideRegion(name) {
            // console.log("hide", name)
            try {
                var self = this;

                // remove DOM of blocks
                var region = document.getElementById(name + '-region');
                if (region) {
                    region.innerHTML = "";
                    region.style.display = "none";
                }

                // remove data of blocks
                if (self.regions) {
                    delete self.regions[name];
                }

            } catch (e) {
                console.warn(e);
            }
        }

        //-------

        addPagesDefine(callback) {
            var self = this;

            var list = self.regions;
            document.body.querySelectorAll('[id]').forEach(el => {
                var id = el.id || "";
                if (id.endsWith('-region')) {
                    list.push(id.split('-')[0]);
                }
            });

            var url = 'page.js';

            if (app.address) {
                url = `${app.address}/${url}`;
            }

            Render.addScript([url], () => {
                callback();
            });
        }

        addBlocksDependency(callback) {
            var self = this;

            var list = [];
            var pages = app.pages;
            Object.keys(pages).forEach(p => {
                var page = new pages[p]();
                self.regions.forEach(rg => {
                    var blocks = page[rg] || [];
                    blocks.forEach(bl => {

                        var com = `${bl.com}/index.js`;

                        if ((bl.url || app.address)) {
                            com = `${(bl.url || app.address)}/${com}`;
                        }                                                

                        if (list.indexOf(com) < 0) {
                            list.push(com);
                        }

                    });
                });
            });

            Render.addScript(list, () => {
                callback();
            });
        }
    }

    function loadPage(callback) {
        var render = new Render();
        render.addPagesDefine(() => {
            render.addBlocksDependency(() => {
                render.renderBlocks(() => {
                    if (callback) callback();
                    // event.fire();
                });
            });
        });
    }





    // export
    app.loadPage = loadPage;
})();/**
 * ===========================================================================================
 * Component of page, depend module.js
 * ===========================================================================================
 */
(function() {
    "use strict";

    const SCRIPT = document.currentScript;

    class Com extends app.Helper {

        static get type() { return 'com'; };
        static get name() { return 'Com'; };

        constructor(config) {
            super();

            this.script = SCRIPT;
            this.setConfig(config);

            this.containerId = "bl-" + Com.random(5);
            this.eid = this.containerId; // short
        }

        getHtml() {
            var self = this;

            let html = '';
            html += '<div id="' + self.eid + '" class="' + self.constructor.name + '">';
            html += '</div>';

            return html;
        }

        loadComponent(callback) {
            var self = this;
            callback = callback || function() {};

            if (self.__reload) {
                // is reloaded -> don't need add template and register event again.
                return callback();
            }
            self.__reload = true;

            var lastTemplate = document.getElementById(self.containerId);
            self.addTemplate(self.containerId, () => {
                if (!self.__eventRegisted) {
                    self.eventListener();
                    self.__eventRegisted = true;
                }
                callback();
            });
        }

        repaint() {
            // update gui
        }

        eventListener() {
            var self = this;
            event.on("ChangeDisplay", (eventName, msg, src) => {
                self.repaint();
            });
        }

        /**
         * ===========================================================================================
         * Utilities functions
         * ===========================================================================================
         */

        setConfig(config) {

            if (this.name && this.name !== this.config.name) {
                return console.warn('Wrong block config type');
            }

            this.config = config || {};
            // this.name = config.name;
            // this.module = this.config.module;
        }

        addTemplate(elementId, callback) {
            var self = this;

            if (!self.script) {
                console.warn('can not load block', self.name);
                return callback();
            }

            var src = self.script.src;
            self.getFile(src.replace('index.js', 'style.css'), (css) => {
                self.getFile(src.replace('index.js', 'index.html'), (html) => {

                    var str = "";
                    str += '<style type="text/css">' + css + '</style>';
                    str += html;

                    var block = document.getElementById(elementId);
                    if (!block) {
                        return callback();
                    }

                    block.innerHTML = ""; // clean
                    block.insertAdjacentHTML("beforeend", str);

                    //-----> Todo: set id for all child element.
                    // consider to remove this feature later.
                    self.setSubElmentIds(block);
                    //----> End

                    callback();
                });
            });
        }

        setSubElmentIds(blockElement) {
            var blockId = this.eid;
            var el, childs = blockElement.getElementsByTagName("*");

            for (var i = childs.length - 1; i >= 0; i--) {
                el = childs[i];
                if (el.id) {
                    el.id = blockId + '-' + el.id;
                }
            }
        }

        getSubElementId(id) {
            return this.eid + '-' + id;
        }

        getSubElementById(id) {
            return document.getElementById(this.eid + '-' + id);
        }

        getFile(url, callback) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (this.readyState === XMLHttpRequest.DONE) {
                    return callback(this.responseText);
                }
            };
            xhr.open("GET", url, true);
            xhr.send();
        };
    }

    // export
    app.Com = Com;
})();/**
 * ===========================================================================================
 * Config view of a page, depend module.js
 * ===========================================================================================
 */
(function() {
    "use strict";

    class Page {
        static get type() { return 'page'; };
        static get name() { return 'Page'; };

        //--- region
        // get top() {
        //     return [{ module: "common", com: "app-topbar" url:"https://domain.com/ctr-lib-0-0-0/" }];
        // }
        // get left() {
        //     return [{ module: "common", com: "wg-menu" }];
        // }
        // get center() { return []; }
    }

    // export
    app.Page = Page;
})();